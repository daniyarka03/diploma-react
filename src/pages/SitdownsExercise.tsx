import { useEffect, useRef, useState } from 'react';
import { Pose, Results } from '@mediapipe/pose';
import { Camera } from '@mediapipe/camera_utils';
import { POSE_CONNECTIONS } from '@mediapipe/pose';
import { drawConnectors, drawLandmarks } from '@mediapipe/drawing_utils';

// –¢–∏–ø –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∑—ã, –ø–æ–ª—É—á–∞–µ–º—ã—Ö –æ—Ç Mediapipe
interface PoseLandmarks {
    x: number;
    y: number;
    z: number;
}

const SitdownsExercise: React.FC = () => {
    const videoRef = useRef<HTMLVideoElement | null>(null);
    const canvasRef = useRef<HTMLCanvasElement | null>(null);
    const [count, setCount] = useState<number>(0);

    // –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è
    let hasStartedSquat = false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ
    let hasReachedPartialStand = false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–º–Ω–æ–≥–æ –≤—Å—Ç–∞–ª
    let hasCompletedSquat = false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—Å—Ç–∞–ª

    // –ë—É—Ñ–µ—Ä –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —É–≥–ª–æ–≤
    const lastAngles: number[] = [];
    const bufferAngles = (angle: number): number => {
        if (lastAngles.length >= 5) lastAngles.shift(); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–∞–¥—Ä–æ–≤
        lastAngles.push(angle);
        return lastAngles.reduce((sum, val) => sum + val, 0) / lastAngles.length; // –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
    };

    useEffect(() => {
        console.log('‚≠êCOUNT:', count);
    }, [count]);

    useEffect(() => {
        const videoElement = videoRef.current;
        const canvasElement = canvasRef.current;
        if (!canvasElement || !videoElement) return;

        const canvasCtx = canvasElement.getContext('2d');
        if (!canvasCtx) return;

        const pose = new Pose({
            locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`,
        });

        pose.setOptions({
            modelComplexity: 1,
            smoothLandmarks: true,
            enableSegmentation: false,
            minDetectionConfidence: 0.5,
            minTrackingConfidence: 0.5,
        });
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-nocheck
        const onResults = (results: Results) => {
            canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
            canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);

            if (results.poseLandmarks) {
                // –†–∞—Å—á–µ—Ç —É–≥–ª–æ–≤ –º–µ–∂–¥—É —Å—É—Å—Ç–∞–≤–∞–º–∏
                drawConnectors(canvasCtx, results.poseLandmarks, POSE_CONNECTIONS, {
                    color: '#00FF00',
                    lineWidth: 4,
                });
                drawLandmarks(canvasCtx, results.poseLandmarks, {
                    color: '#FF0000',
                    lineWidth: 2,
                });

                const calculateAngle = (a: PoseLandmarks, b: PoseLandmarks, c: PoseLandmarks): number => {
                    const radians = Math.atan2(c.y - b.y, c.x - b.x) - Math.atan2(a.y - b.y, a.x - b.x);
                    const angle = Math.abs(radians * 180 / Math.PI);
                    return angle > 180 ? 360 - angle : angle;
                };

                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
                const leftHip = results.poseLandmarks[23];
                const leftKnee = results.poseLandmarks[25];
                const leftAnkle = results.poseLandmarks[27];
                const rightHip = results.poseLandmarks[24];
                const rightKnee = results.poseLandmarks[26];
                const rightAnkle = results.poseLandmarks[28];
                // const leftShoulder = results.poseLandmarks[11];
                // const rightShoulder = results.poseLandmarks[12];
                // const leftToe = results.poseLandmarks[31];
                // const rightToe = results.poseLandmarks[32];

                // –£–≥–ª—ã –¥–ª—è –æ–±–µ–∏—Ö –Ω–æ–≥
                const leftKneeAngle = calculateAngle(leftHip, leftKnee, leftAnkle);
                const rightKneeAngle = calculateAngle(rightHip, rightKnee, rightAnkle);

                // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —É–≥–ª–æ–≤
                const smoothedLeftKneeAngle = bufferAngles(leftKneeAngle);
                const smoothedRightKneeAngle = bufferAngles(rightKneeAngle);

                let isFullSquat =
                    smoothedLeftKneeAngle < 130 &&
                    smoothedRightKneeAngle < 130 &&
                    leftKnee.y > leftHip.y &&
                    rightKnee.y > rightHip.y &&
                    leftAnkle.y > leftHip.y &&
                    rightAnkle.y > rightHip.y;

                // –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
                const checkStandingPosition = (landmarks: PoseLandmarks[]): boolean => {
                    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
                    const leftHip = landmarks[23];
                    const rightHip = landmarks[24];
                    const leftKnee = landmarks[25];
                    const rightKnee = landmarks[26];
                    const leftAnkle = landmarks[27];
                    const rightAnkle = landmarks[28];

                    // –£—Å–ª–æ–≤–∏–µ 1: –ë–µ–¥—Ä–∞ –≤—ã—à–µ –∫–æ–ª–µ–Ω
                    const hipsAboveKnees =
                        leftHip.y < leftKnee.y && rightHip.y < rightKnee.y;

                    // –£—Å–ª–æ–≤–∏–µ 2: –ö–æ–ª–µ–Ω–∏ –≤—ã—à–µ –ª–æ–¥—ã–∂–µ–∫
                    const kneesAboveAnkles =
                        leftKnee.y < leftAnkle.y && rightKnee.y < rightAnkle.y;

                    // –£—Å–ª–æ–≤–∏–µ 3: –õ–∏–Ω–∏—è "–±–µ–¥—Ä–æ-–∫–æ–ª–µ–Ω–æ-–ª–æ–¥—ã–∂–∫–∞" –ø—Ä–∏–º–µ—Ä–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ (—Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ X –º–∏–Ω–∏–º–∞–ª—å–Ω–∞)
                    const legsAreStraight =
                        Math.abs(leftHip.x - leftKnee.x) < 0.1 &&
                        Math.abs(leftKnee.x - leftAnkle.x) < 0.1 &&
                        Math.abs(rightHip.x - rightKnee.x) < 0.1 &&
                        Math.abs(rightKnee.x - rightAnkle.x) < 0.1;

                    return hipsAboveKnees && kneesAboveAnkles && legsAreStraight;
                };

                const handleSquatCounting = () => {
                    if (!isFullSquat && !hasStartedSquat && !hasCompletedSquat && checkStandingPosition(results.poseLandmarks)) {
                        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—Ç–∞–ª, –≥–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è
                        console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏.");
                        hasStartedSquat = true;
                    }

                    if (isFullSquat && hasStartedSquat && !hasCompletedSquat) {
                        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –ø–æ–ª–Ω–æ–π –Ω–∏–∂–Ω–µ–π —Ç–æ—á–∫–∏ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è
                        console.log("‚¨áÔ∏è –ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–ª–æ –Ω–∏–∂–Ω–µ–π —Ç–æ—á–∫–∏.");
                        hasReachedPartialStand = true;
                    }

                    if (!isFullSquat && hasStartedSquat && hasReachedPartialStand && !hasCompletedSquat && checkStandingPosition(results.poseLandmarks)) {
                        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω—É–ª—Å—è –≤ —Å—Ç–æ—è—á–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (—Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω)
                        setCount((prev) => prev + 1);
                        console.log("‚≠ê –ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—á–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.");
                        hasCompletedSquat = true;

                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
                        hasStartedSquat = false;
                        hasReachedPartialStand = false;
                        isFullSquat = false;
                        console.log("üîÑ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É —Ü–∏–∫–ª—É.");
                    }

                    if (hasCompletedSquat && checkStandingPosition(results.poseLandmarks)) {
                        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Å—Ç–æ—è—á–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                        console.log("üõë –í —Å—Ç–æ—è—á–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏. –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è.");
                    }
                };

                handleSquatCounting();
            }
        };

        pose.onResults(onResults);

        if (videoElement) {
            const camera = new Camera(videoElement, {
                onFrame: async () => {
                    await pose.send({ image: videoElement });
                },
                width: 640,
                height: 480,
            });
            camera.start();
        }
    }, [count]);

    return (
        <div className="sitdowns">
            <h1>Sitdowns: {count}</h1>
            <video ref={videoRef} className="input_video" playsInline style={{ display: 'none' }} />
            <canvas ref={canvasRef} className="output_canvas" width="640" height="480"></canvas>
        </div>
    );
};

export default SitdownsExercise;
